import React, { useEffect, useState } from "react";
import { Model } from "survey-core";
import { Survey } from "survey-react-ui";
import "survey-core/survey-core.min.css";
import "./index.css";

const VERCEL_API_BASE = "https://form-maker-git-main-hashir32s-projects.vercel.app/api/forms";

function SurveyComponent() {
  const [surveyModel, setSurveyModel] = useState(null);

  useEffect(() => {
    fetch(`${VERCEL_API_BASE}/random`)
      .then((res) => res.json())
      .then((data) => {
        const questions = data.questions;

        const introElement = {
          type: "html",
          name: "intro",
          html: `
            <div class="intro-container">
              <h2>🔒 Privacy Breach Evaluation Survey</h2>
              <p>
                These privacy breaches are generated by an LLM architecture. This study helps assess the quality of the generated breaches across three criteria.
              </p>
              <p>
                Each breach is based on a set of IoT <strong>functionalities</strong>—specific actions or data-collection capabilities of IoT devices.
                For example, a smartwatch (an IoT device) may <em>track heart rate, record steps, detect motion, and analyze sleep quality</em>.
                Other devices may monitor <em>dietary habits, adjust lighting, recognize emotions, or record audio/video</em>.
              </p>
              <p>
                The scenarios combine such functionalities to simulate how sensitive data might be exploited or mishandled.
              </p>
              <p><strong>Rate each scenario based on:</strong></p>
              <ul>
                <li><strong>Plausibility:</strong> Is it feasible in real-world IoT use?</li>
                <li><strong>Comprehensiveness:</strong> Is the explanation complete and informative?</li>
                <li><strong>Company Perspective:</strong> Does it reflect a company’s viewpoint?</li>
              </ul>
            </div>
          `
        };
        

        const questionElements = questions.map((q, idx) => ({
          type: "panel",
          name: `question_${idx}`,
          title: q.questionText,
          elements: [
            {
              type: "rating",
              name: `q${idx}_metric1`,
              title: "🌐 Plausibility",
              rateCount: 10
            },
            {
              type: "rating",
              name: `q${idx}_metric2`,
              title: "🧠 Comprehensiveness",
              rateCount: 10
            },
            {
              type: "rating",
              name: `q${idx}_metric3`,
              title: "🏢 Company Perspective",
              rateCount: 10
            }
          ]
        }));

        const json = {
          pages: [
            {
              name: "page1",
              elements: [introElement, ...questionElements]
            }
          ]
        };

        const survey = new Model(json);
        survey.onComplete.add((sender) => {
          const responses = sender.data;
          questions.forEach((q, idx) => {
            const body = {
              rating_1: responses[`q${idx}_metric1`],
              rating_2: responses[`q${idx}_metric2`],
              rating_3: responses[`q${idx}_metric3`]
            };
            fetch(`${VERCEL_API_BASE}/rate-question/${q._id}`, {
              method: "PATCH",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            });
          });
        });

        setSurveyModel(survey);
      });
  }, []);

  return surveyModel ? (
    <div className="survey-container">
      <Survey model={surveyModel} />
    </div>
  ) : (
    <p className="loading-text">Loading survey...</p>
  );
}

export default SurveyComponent;
